#include <windows.h>
#include <GL\freeglut.h>
#include <cmath>
#include <stdlib.h>
int color=1;
int x2=-20,x3=-20,x4=20,x5=20,y5=-20,y2=-20,y3=20,y4=20;

void myInit() {
    glClearColor(0.0,0.0,0.0,1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-100,100,-100,100,-1,1);
    glMatrixMode(GL_MODELVIEW);
}

void display() {
    glClearColor(0.0,0.0,0.0,1.0);

    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_QUADS);
    glColor3f(0.0,1.0,0.0);
    glVertex2f(x2,y2);
    glVertex2f(x3,y3);
    glVertex2f(x4,y4);
    glVertex2f(x5,y5);
    glEnd();
    glFlush();
}

void myfunc(int key,int x,int y){
    if (key==GLUT_KEY_UP){
   y2++;
   y3++;
   y4++;
   y5++;
   glutPostRedisplay();
    }
    if (key==GLUT_KEY_DOWN){
        y2--;
        y3--;
        y4--;
        y5--;
        glutPostRedisplay();
    }
    if (key==GLUT_KEY_RIGHT){
        x2++;
        x3++;
        x4++;
        x5++;
        glutPostRedisplay();
    }
    if (key==GLUT_KEY_LEFT){
        x2--;
        x3--;
        x4--;
        x5--;
        glutPostRedisplay();
    }
}

void back(int key, int x, int y){
    if(key==GLUT_KEY_UP){
        while(y3!=20){
            y2--;
            y3--;
            y4--;
            y5--;
            glutPostRedisplay();
        }}
        if(key==GLUT_KEY_DOWN) {
            while (y3 != 20) {
                y2++;
                y3++;
                y4++;
                y5++;
                glutPostRedisplay();
            }
        }
            if(key==GLUT_KEY_RIGHT){
                while(x4!=20){
                    x2--;
                    x3--;
                    x4--;
                    x5--;
                    glutPostRedisplay();
                }}
                if(key==GLUT_KEY_LEFT){
                    while(x4!=20){
                        x2++;
                        x3++;
                        x4++;
                        x5++;
                        glutPostRedisplay();
                    }
                }
}


int main(int argc, char ** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(100,100);

    glutCreateWindow("movingSquare");
    glutSpecialFunc(myfunc);
    glutSpecialUpFunc(back);
    glutDisplayFunc(display);
    myInit();
    glutMainLoop();

    return 0;
}